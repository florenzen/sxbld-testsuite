module SimplyTypedLambdaCalculus

 imports org/sugarj/sxbld/initTrans SimplyTypedLambdaCalculus SimplyTypedLambdaCalculus SimplyTypedLambdaCalculus SimplyTypedLambdaCalculus


signature
  constructors
    SXJudgement10 : SimplyTypedLambdaCalculusEnv() * SimplyTypedLambdaCalculusTerm() * SimplyTypedLambdaCalculusType() -> SXJudgement()


signature
  constructors
    


signature
  constructors
    


signature
  constructors
    SXCons0 : SimplyTypedLambdaCalculusID() -> SimplyTypedLambdaCalculusTerm()
    SXCons0 : SimplyTypedLambdaCalculusGndID() -> SimplyTypedLambdaCalculusGndTerm()
    SXCons1 : SimplyTypedLambdaCalculusID() * SimplyTypedLambdaCalculusType() * SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SXCons1 : SimplyTypedLambdaCalculusGndID() * SimplyTypedLambdaCalculusGndType() * SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()
    SXCons2 : SimplyTypedLambdaCalculusTerm() * SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SXCons2 : SimplyTypedLambdaCalculusGndTerm() * SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()
    SXCons3 : SimplyTypedLambdaCalculusNAT() -> SimplyTypedLambdaCalculusTerm()
    SXCons3 : SimplyTypedLambdaCalculusGndNAT() -> SimplyTypedLambdaCalculusGndTerm()
    SXCons4 : SimplyTypedLambdaCalculusTerm() * SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SXCons4 : SimplyTypedLambdaCalculusGndTerm() * SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()
    SXCons5 : SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SXCons5 : SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()


signature
  constructors
    SXCons6 : SimplyTypedLambdaCalculusType()
    SXCons6 : SimplyTypedLambdaCalculusGndType()
    SXCons7 : SimplyTypedLambdaCalculusType() * SimplyTypedLambdaCalculusType() -> SimplyTypedLambdaCalculusType()
    SXCons7 : SimplyTypedLambdaCalculusGndType() * SimplyTypedLambdaCalculusGndType() -> SimplyTypedLambdaCalculusGndType()


signature
  constructors
    


signature
  constructors
    SXCons8 : SimplyTypedLambdaCalculusEnv()
    SXCons8 : SimplyTypedLambdaCalculusGndEnv()
    SXCons9 : SimplyTypedLambdaCalculusEnv() * SimplyTypedLambdaCalculusID() * SimplyTypedLambdaCalculusType() -> SimplyTypedLambdaCalculusEnv()
    SXCons9 : SimplyTypedLambdaCalculusGndEnv() * SimplyTypedLambdaCalculusGndID() * SimplyTypedLambdaCalculusGndType() -> SimplyTypedLambdaCalculusGndEnv()


signature
  constructors
    


strategies
  SimplyTypedLambdaCalculus-cons-names =
    !["SXCons9"|["SXCons8"|["SXCons7"|["SXCons6"|["SXCons5"|["SXCons4"|["SXCons3"|["SXCons2"|["SXCons1"|["SXCons0"]]]]]]]]]]


strategies
  SimplyTypedLambdaCalculus-inference-rules =
    ![( "App"
      , SXAbsInfRule(
          [SXJudgement10(
             SXMetaVar("C")
           , SXMetaVar("t1")
           , SXCons7(
               SXMetaVar("T1")
             , SXMetaVar("T2")
             )
           )|[ SXJudgement10(
                 SXMetaVar("C")
               , SXMetaVar("t2")
               , SXMetaVar("T1")
               )
             ]]
        , SXJudgement10(
            SXMetaVar("C")
          , SXCons2(
              SXMetaVar("t1")
            , SXMetaVar("t2")
            )
          , SXMetaVar("T2")
          )
        )
      )|[( "Abs"
         , SXAbsInfRule(
             [ SXJudgement10(
                 SXCons9(
                   SXMetaVar("C")
                 , SXMetaVar("x")
                 , SXMetaVar("T")
                 )
               , SXMetaVar("t")
               , SXMetaVar("T2")
               )
             ]
           , SXJudgement10(
               SXMetaVar("C")
             , SXCons1(
                 SXMetaVar("x")
               , SXMetaVar("T1")
               , SXMetaVar("t")
               )
             , SXCons7(
                 SXMetaVar("T1")
               , SXMetaVar("T2")
               )
             )
           )
         )|[( "Nat"
            , SXAbsInfRule(
                []
              , SXJudgement10(
                  SXMetaVar("C")
                , SXCons3(SXMetaVar("n"))
                , SXCons6()
                )
              )
            )|[ ( "Var"
                , SXAbsInfRule(
                    []
                  , SXJudgement10(
                      SXCons9(
                        SXMetaVar("C")
                      , SXMetaVar("x")
                      , SXMetaVar("T")
                      )
                    , SXCons0(SXMetaVar("x"))
                    , SXMetaVar("T")
                    )
                  )
                )
              ]]]]


strategies
  SimplyTypedLambdaCalculus-base-file-ext =
    !"st"


strategies
  SimplyTypedLambdaCalculus-extensible-file-ext =
    !"xst"


strategies
  SimplyTypedLambdaCalculus-body-decs =
    ![]


strategies
  SimplyTypedLambdaCalculus-import-decs =
    ![]