module SimplyTypedLambdaCalculus
 imports org/sugarj/sxbld/initGrammar SimplyTypedLambdaCalculus SimplyTypedLambdaCalculus
exports 
  (/)

context-free syntax
  SimplyTypedLambdaCalculusEnv "|-" SimplyTypedLambdaCalculusTerm ":" SimplyTypedLambdaCalculusType -> SXJudgement {cons("SXJudgement6")}
lexical syntax
  [0-9] [0-9]*          -> SimplyTypedLambdaCalculusNAT    
  [0-9] [0-9]*          -> SimplyTypedLambdaCalculusGndNAT 
  [a-zA-Z] [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusID     
  [a-zA-Z] [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndID   context-free syntax
                                                               lexical restrictions
                                                                 
                                                                 
                                                                 SimplyTypedLambdaCalculusNAT
                                                                 -/- [0-9]
                                                                 
                                                                 
                                                                 SimplyTypedLambdaCalculusID
                                                                 -/- [a-zA-Z0-9]
lexical syntax
  "Nat"                                     -> SimplyTypedLambdaCalculusPrimitiveType    
  "Nat"                                     -> SimplyTypedLambdaCalculusGndPrimitiveType 
  SimplyTypedLambdaCalculusPrimitiveType    -> SimplyTypedLambdaCalculusID               {reject}
  SimplyTypedLambdaCalculusGndPrimitiveType -> SimplyTypedLambdaCalculusGndID            {reject}
context-free syntax
  
context-free syntax
  SimplyTypedLambdaCalculusID                                                                                   -> SimplyTypedLambdaCalculusTerm    {cons("SimplyTypedLambdaCalculusVar")}
  SimplyTypedLambdaCalculusGndID                                                                                -> SimplyTypedLambdaCalculusGndTerm {cons("SimplyTypedLambdaCalculusVar")}
  "\\" SimplyTypedLambdaCalculusID ":" SimplyTypedLambdaCalculusType "." SimplyTypedLambdaCalculusTerm          -> SimplyTypedLambdaCalculusTerm    {cons("SimplyTypedLambdaCalculusAbs")}
  "\\" SimplyTypedLambdaCalculusGndID ":" SimplyTypedLambdaCalculusGndType "." SimplyTypedLambdaCalculusGndTerm -> SimplyTypedLambdaCalculusGndTerm {cons("SimplyTypedLambdaCalculusAbs")}
  SimplyTypedLambdaCalculusTerm SimplyTypedLambdaCalculusTerm                                                   -> SimplyTypedLambdaCalculusTerm    {cons("SimplyTypedLambdaCalculusApp"), left}
  SimplyTypedLambdaCalculusGndTerm SimplyTypedLambdaCalculusGndTerm                                             -> SimplyTypedLambdaCalculusGndTerm {cons("SimplyTypedLambdaCalculusApp"), left}
  SimplyTypedLambdaCalculusNAT                                                                                  -> SimplyTypedLambdaCalculusTerm    {cons("SimplyTypedLambdaCalculusNat")}
  SimplyTypedLambdaCalculusGndNAT                                                                               -> SimplyTypedLambdaCalculusGndTerm {cons("SimplyTypedLambdaCalculusNat")}
  SimplyTypedLambdaCalculusTerm "+" SimplyTypedLambdaCalculusTerm                                               -> SimplyTypedLambdaCalculusTerm    {cons("SimplyTypedLambdaCalculusAdd"), left}
  SimplyTypedLambdaCalculusGndTerm "+" SimplyTypedLambdaCalculusGndTerm                                         -> SimplyTypedLambdaCalculusGndTerm {cons("SimplyTypedLambdaCalculusAdd"), left}
  "(" SimplyTypedLambdaCalculusTerm ")"                                                                         -> SimplyTypedLambdaCalculusTerm    {cons("SXCons0"), brackets}
  "(" SimplyTypedLambdaCalculusGndTerm ")"                                                                      -> SimplyTypedLambdaCalculusGndTerm {cons("SXCons0"), brackets}
context-free syntax
  "Nat"                                                                  -> SimplyTypedLambdaCalculusType    {cons("SXCons1")}
  "Nat"                                                                  -> SimplyTypedLambdaCalculusGndType {cons("SXCons1")}
  SimplyTypedLambdaCalculusType "->" SimplyTypedLambdaCalculusType       -> SimplyTypedLambdaCalculusType    {cons("SXCons2"), right}
  SimplyTypedLambdaCalculusGndType "->" SimplyTypedLambdaCalculusGndType -> SimplyTypedLambdaCalculusGndType {cons("SXCons2"), right}
  "(" SimplyTypedLambdaCalculusType ")"                                  -> SimplyTypedLambdaCalculusType    {cons("SXCons3"), brackets}
  "(" SimplyTypedLambdaCalculusGndType ")"                               -> SimplyTypedLambdaCalculusGndType {cons("SXCons3"), brackets}
lexical syntax
  "x" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusMVID      
  "x" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndMVID   
  "y" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusMVID      
  "y" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndMVID   
  "n" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusMVNAT     
  "n" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndMVNAT  
  "t" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusMVTerm    
  "t" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndMVTerm 
  "S" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusMVType    
  "S" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndMVType 
  "T" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusMVType    
  "T" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndMVType  context-free syntax
                                                             lexical restrictions
                                                               
                                                               
                                                               SimplyTypedLambdaCalculusMVID
                                                               SimplyTypedLambdaCalculusMVNAT
                                                               SimplyTypedLambdaCalculusMVTerm
                                                               SimplyTypedLambdaCalculusMVType
                                                               -/- [a-zA-Z0-9]
variables
  SimplyTypedLambdaCalculusMVID   -> SimplyTypedLambdaCalculusID   {prefer}
  SimplyTypedLambdaCalculusMVNAT  -> SimplyTypedLambdaCalculusNAT  {prefer}
  SimplyTypedLambdaCalculusMVTerm -> SimplyTypedLambdaCalculusTerm {prefer}
  SimplyTypedLambdaCalculusMVType -> SimplyTypedLambdaCalculusType {prefer}
context-free syntax
  "{}"                                                                                                    -> SimplyTypedLambdaCalculusEnv    {cons("SXCons4")}
  "{}"                                                                                                    -> SimplyTypedLambdaCalculusGndEnv {cons("SXCons4")}
  SimplyTypedLambdaCalculusEnv "," SimplyTypedLambdaCalculusID ":" SimplyTypedLambdaCalculusType          -> SimplyTypedLambdaCalculusEnv    {cons("SXCons5")}
  SimplyTypedLambdaCalculusGndEnv "," SimplyTypedLambdaCalculusGndID ":" SimplyTypedLambdaCalculusGndType -> SimplyTypedLambdaCalculusGndEnv {cons("SXCons5")}
lexical syntax
  "C" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusMVEnv    
  "C" [a-zA-Z0-9]* -> SimplyTypedLambdaCalculusGndMVEnv  context-free syntax
                                                            lexical restrictions
                                                              
                                                              
                                                              SimplyTypedLambdaCalculusMVEnv
                                                              -/- [a-zA-Z0-9]
variables
  SimplyTypedLambdaCalculusMVEnv -> SimplyTypedLambdaCalculusEnv 