module SimplyTypedLambdaCalculus

 imports org/sugarj/sxbld/initTrans SimplyTypedLambdaCalculus SimplyTypedLambdaCalculus


signature
  constructors
    SXJudgement6 : SimplyTypedLambdaCalculusEnv() * SimplyTypedLambdaCalculusTerm() * SimplyTypedLambdaCalculusType() -> SXJudgement()


signature
  constructors
    


signature
  constructors
    


signature
  constructors
    SimplyTypedLambdaCalculusVar : SimplyTypedLambdaCalculusID() -> SimplyTypedLambdaCalculusTerm()
    SimplyTypedLambdaCalculusVar : SimplyTypedLambdaCalculusGndID() -> SimplyTypedLambdaCalculusGndTerm()
    SimplyTypedLambdaCalculusAbs : SimplyTypedLambdaCalculusID() * SimplyTypedLambdaCalculusType() * SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SimplyTypedLambdaCalculusAbs : SimplyTypedLambdaCalculusGndID() * SimplyTypedLambdaCalculusGndType() * SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()
    SimplyTypedLambdaCalculusApp : SimplyTypedLambdaCalculusTerm() * SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SimplyTypedLambdaCalculusApp : SimplyTypedLambdaCalculusGndTerm() * SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()
    SimplyTypedLambdaCalculusNat : SimplyTypedLambdaCalculusNAT() -> SimplyTypedLambdaCalculusTerm()
    SimplyTypedLambdaCalculusNat : SimplyTypedLambdaCalculusGndNAT() -> SimplyTypedLambdaCalculusGndTerm()
    SimplyTypedLambdaCalculusAdd : SimplyTypedLambdaCalculusTerm() * SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SimplyTypedLambdaCalculusAdd : SimplyTypedLambdaCalculusGndTerm() * SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()
    SXCons0                      : SimplyTypedLambdaCalculusTerm() -> SimplyTypedLambdaCalculusTerm()
    SXCons0                      : SimplyTypedLambdaCalculusGndTerm() -> SimplyTypedLambdaCalculusGndTerm()


signature
  constructors
    SXCons1 : SimplyTypedLambdaCalculusType()
    SXCons1 : SimplyTypedLambdaCalculusGndType()
    SXCons2 : SimplyTypedLambdaCalculusType() * SimplyTypedLambdaCalculusType() -> SimplyTypedLambdaCalculusType()
    SXCons2 : SimplyTypedLambdaCalculusGndType() * SimplyTypedLambdaCalculusGndType() -> SimplyTypedLambdaCalculusGndType()
    SXCons3 : SimplyTypedLambdaCalculusType() -> SimplyTypedLambdaCalculusType()
    SXCons3 : SimplyTypedLambdaCalculusGndType() -> SimplyTypedLambdaCalculusGndType()


signature
  constructors
    


signature
  constructors
    SXCons4 : SimplyTypedLambdaCalculusEnv()
    SXCons4 : SimplyTypedLambdaCalculusGndEnv()
    SXCons5 : SimplyTypedLambdaCalculusEnv() * SimplyTypedLambdaCalculusID() * SimplyTypedLambdaCalculusType() -> SimplyTypedLambdaCalculusEnv()
    SXCons5 : SimplyTypedLambdaCalculusGndEnv() * SimplyTypedLambdaCalculusGndID() * SimplyTypedLambdaCalculusGndType() -> SimplyTypedLambdaCalculusGndEnv()


signature
  constructors
    


strategies
  SimplyTypedLambdaCalculus-cons-names =
    !["SXCons5"|["SXCons4"|["SXCons3"|["SXCons2"|["SXCons1"|["SXCons0"|["SimplyTypedLambdaCalculusAdd"|["SimplyTypedLambdaCalculusNat"|["SimplyTypedLambdaCalculusApp"|["SimplyTypedLambdaCalculusAbs"|["SimplyTypedLambdaCalculusVar"]]]]]]]]]]]


strategies
  SimplyTypedLambdaCalculus-inference-rules =
    ![( "Abs"
      , SXAbsInfRule(
          [SXJudgement6(
             SXMetaVar("C")
           , SXMetaVar("t1")
           , SXCons2(
               SXMetaVar("T1")
             , SXMetaVar("T2")
             )
           )|[ SXJudgement6(
                 SXMetaVar("C")
               , SXMetaVar("t2")
               , SXMetaVar("T1")
               )
             ]]
        , SXJudgement6(
            SXMetaVar("C")
          , SimplyTypedLambdaCalculusApp(
              SXMetaVar("t1")
            , SXMetaVar("t2")
            )
          , SXMetaVar("T2")
          )
        )
      )|[( "App"
         , SXAbsInfRule(
             [ SXJudgement6(
                 SXCons5(
                   SXMetaVar("C")
                 , SXMetaVar("x")
                 , SXMetaVar("T")
                 )
               , SXMetaVar("t")
               , SXMetaVar("T2")
               )
             ]
           , SXJudgement6(
               SXMetaVar("C")
             , SimplyTypedLambdaCalculusAbs(
                 SXMetaVar("x")
               , SXMetaVar("T1")
               , SXMetaVar("t")
               )
             , SXCons2(
                 SXMetaVar("T1")
               , SXMetaVar("T2")
               )
             )
           )
         )|[( "Nat"
            , SXAbsInfRule(
                []
              , SXJudgement6(
                  SXMetaVar("C")
                , SimplyTypedLambdaCalculusNat(SXMetaVar("n"))
                , SXCons1()
                )
              )
            )|[ ( "Var"
                , SXAbsInfRule(
                    []
                  , SXJudgement6(
                      SXCons5(
                        SXMetaVar("C")
                      , SXMetaVar("x")
                      , SXMetaVar("T")
                      )
                    , SimplyTypedLambdaCalculusVar(SXMetaVar("x"))
                    , SXMetaVar("T")
                    )
                  )
                )
              ]]]]